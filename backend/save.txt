# FOODGRAM BACKEND - КОНТЕКСТ СЕССИИ

ТЕКУЩИЙ ЭТАП: Настройка кастомной модели User

ВАЖНЫЕ РЕШЕНИЯ:
1. Модель User наследуется от AbstractUser
2. Поле username переопределено как "Имя" (фактически first_name)
3. Добавлено отдельное поле last_name как "Фамилия"  
4. Email сделан уникальным и обязательным
5. USERNAME_FIELD = 'email' - вход по email
6. В save() метод автоматически копирует email в username
7. groups и user_permissions отключены (groups = None)

КОД МОДЕЛИ User (users/models.py):
```python
from django.db import models
from django.contrib.auth.models import AbstractUser

MAX_TITLE_LENGTH = 200

class User(AbstractUser):
    username = models.CharField(
        max_length=MAX_TITLE_LENGTH,
        blank=False,
        verbose_name='Имя',
        help_text='Обязательное поле'
    )
    last_name = models.CharField(
        max_length=MAX_TITLE_LENGTH,
        blank=False,
        verbose_name='Фамилия',
        help_text='Обязательное поле'
    )
    bio = models.TextField(blank=True, verbose_name='Об авторе')
    email = models.EmailField(
        max_length=256,
        unique=True,
        help_text='Обязательное поле',
        blank=False
    )
    groups = None
    user_permissions = None

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username', 'last_name']

    def save(self, *args, **kwargs):
        self.username = self.email
        super().save(*args, **kwargs) 

    class Meta:
        verbose_name = 'Пользователь'
        verbose_name_plural = 'Пользователи'

    def __str__(self):
       return f'{self.username}'


# FOODGRAM BACKEND - КОНТЕКСТ СЕССИИ (ОБНОВЛЕНО)

ТЕКУЩИЙ ЭТАП: Модели Recipe, Tag, Ingredient созданы

ВАЖНЫЕ РЕШЕНИЯ (НОВЫЕ):
1. Модели рецептов созданы в recipes/models.py:
   - Tag (тег): name, slug (уникальные)
   - Ingredient (ингредиент): name, measurement_unit
   - Recipe (рецепт): author, name, image, text, tags, ingredients, cooking_time
   - IngredientsInRecipe (промежуточная модель): recipe, ingredient, amount

2. Реализована сложная связь ManyToMany через промежуточную модель:
   - ingredients = models.ManyToManyField(Ingredient, through='IngredientsInRecipe')
   - Добавлен UniqueConstraint для предотвращения дубликатов ингредиентов в рецепте

3. Соответствие ТЗ:
   - Поля приведены в соответствие с ТЗ (name вместо title, text вместо description)
   - Все обязательные поля добавлены

ТЕХНИЧЕСКИЕ ДЕТАЛИ:
- Использован get_user_model() для связи с кастомной моделью User
- Добавлены валидаторы MinValueValidator для времени и количества
- Настроены related_name для связей
- Добавлены мета-данные (ordering, verbose_name)

СЛЕДУЮЩИЕ ШАГИ:
1. Настройка админки для моделей рецептов (recipes/admin.py)
2. Создание и применение миграций
3. Наполнение базы тестовыми данными
4. Начало работы с API (сериализаторы, вьюсеты)

КОММИТ: [Указать хэш коммита] - Созданы модели рецептов